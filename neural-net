# vector-born disease carrier image recognition

import os
import sys
sys.setrecursionlimit(3000)
import cv2
from numpy import asarray
from numpy import save
import numpy as np
import copy
from PIL import Image
from numpy.random import seed
from keras.callbacks import EarlyStopping, ModelCheckpoint, TensorBoard
from keras.models import load_model
import tensorflow as tf
from tf import keras
from keras import optimizers
import random
import datetime
import shutil
from tensorflow.keras.preprocessing import image_dataset_from_directory

# load datasets, reshape and save to a new file
tf.keras.preprocessing.image_dataset_from_directory(
  r"#dir",
  labels="inferred",
  label_mode="int",
  class_names=['anopheles','aedes','tick','culex','blackfly','triatoma'],
  color_mode="rgb",
  batch_size=24,
  image_size=(256, 256),
  shuffle=True,
  seed=123,
  validation_split=0.2,
  subset="training",
  interpolation="bilinear",
  follow_links=False,
  crop_to_aspect_ratio=True
)
    
# changing of data into readable files
train_ds = image_dataset_from_directory(
    directory='training_data/',
    labels='inferred',
    label_mode='categorical',
    batch_size=32,
    image_size=(256, 256))
validation_ds = image_dataset_from_directory(
    directory='validation_data/',
    labels='inferred',
    label_mode='categorical',
    batch_size=32,
    image_size=(256, 256))

# Adam optimiser
keras.optimizers.Adam(
   learning_rate = 0.001, 
   beta_1 = 0.9, 
   beta_2 = 0.999, 
   epsilon=1e-08,
   amsgrad = False
)

# Early Stopping
tf.keras.callbacks.EarlyStopping(
    monitor="val_loss",
    min_delta=0,
    patience=5,
    verbose=0,
    mode="auto",
    baseline=None,
    restore_best_weights=True,
)


# Model Checkpoint
tf.keras.callbacks.ModelCheckpoint(
    r"C:\#dir\checkpoint",
    monitor="val_loss", 
    verbose=1,
    save_best_only=True,
    save_weights_only=False,
    mode="auto",
    save_freq="epoch",
    options=None,
)

# TensorBoard visualisations of data
tf.keras.callbacks.TensorBoard(
    log_dir=r"#dir\tensorLog",
    histogram_freq=0,
    write_graph=True,
    write_images=True,
    write_steps_per_second=True,
    update_freq="batch",
    profile_batch=2,
    embeddings_freq=0,
    embeddings_metadata=None
)

# Precision metrics
tf.keras.metrics.Precision(
    thresholds=0.80, 
    top_k=None, 
    class_id=None, 
    name=None, 
    dtype=None
)

# ResNet neural network
tf.keras.applications.ResNet152(
    include_top=True,
    weights=None,
    input_tensor=None,
    input_shape=None,
    pooling=None,
    classes=8,
    classifier_activation="softmax",
)

#accuracy metric
tf.keras.metrics.Accuracy(name="accuracy", dtype=None)

#compile model
compile(
   optimizer = keras.optimizers.Adam,
   loss = tf.keras.applications.ResNetV2, 
   metrics = tf.keras.metrics.Precision, 
   loss_weights = None, 
   sample_weight_mode = None, 
   weighted_metrics = None, 
   target_tensors = None
)

# Model fit 1.0
keras.fit(
    tf.keras.applications.ResNet152, 
    x = #train,
    y = #test,
    batch_size = 32, 
    epochs = 150,
    verbose = 1,
    callbacks = [EarlyStopping(), ModelCheckpoint(), TensorBoard()],
    view_metrics = [tf.keras.metrics.Precision(), tf.keras.metrics.Accuracy()], 
    validation_split = 0.25, 
    validation_data = (x_val, y_val),
    shuffle = TRUE, 
    class_weight = TRUE, 
    sample_weight = NULL,
    initial_epoch = 0, 
    steps_per_epoch = NULL, 
    validation_steps = NULL
)

