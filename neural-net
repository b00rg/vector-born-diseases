import keras
from tensorflow.keras.preprocessing import image_dataset_from_directory
from numpy import asarray,save
import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator
from keras import backend as K
import keras
from keras.models import Sequential, Model,load_model
from keras.callbacks import EarlyStopping,ModelCheckpoint
from keras.layers import Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, AveragePooling2D, MaxPooling2D, GlobalMaxPooling2D,MaxPool2D
from keras.preprocessing import image
from keras.initializers import glorot_uniform
from tensorflow.keras.preprocessing import image_dataset_from_directory
from numpy import asarray,save
from keras.callbacks import EarlyStopping, ModelCheckpoint, TensorBoard
from keras.models import load_model
import tensorflow as tf
import cv2
import numpy as np
import os
from keras.preprocessing.image import ImageDataGenerator
import tensorflow.keras.backend as K
import keras
from keras.models import Sequential, Model,load_model
from keras.callbacks import EarlyStopping,ModelCheckpoint
from keras.layers import Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, AveragePooling2D, MaxPooling2D, GlobalMaxPooling2D,MaxPool2D
from keras.preprocessing import image
from keras.initializers import glorot_uniform
import random



tf.keras.optimizers.Adam(
    learning_rate=0.0001,
    beta_1=0.9,
    beta_2=0.999,
    epsilon=1e-07,
    amsgrad=False,
    name="Adam"
)
# Model Checkpoint
mc = tf.keras.callbacks.ModelCheckpoint(
    filepath="/Users/***/Desktop/epoch-data/checkpoint",
    monitor="val_loss",
    verbose=1,
    save_best_only=True,
    save_weights_only=True,
    mode="auto",
    save_freq="epoch",
    options=None,
)

tf.keras.metrics.AUC(
    num_thresholds=200,
    curve="ROC",
    summation_method="interpolation",
    name="AUC",
    dtype=None,
    thresholds=None,
    multi_label=True,
    num_labels=7,
    label_weights=None,
    from_logits=False,
)

es = tf.keras.callbacks.EarlyStopping(
    monitor="val_loss",
    min_delta=0,
    patience=2,
    verbose=1,
    mode="min",
    baseline=None,
    restore_best_weights=True
)

tf.keras.losses.Poisson(reduction="auto", name="poisson")

model = tf.keras.applications.ResNet50V2(classes=7,
                                         weights='/Users/***/Desktop/epoch-data/checkpoint',)
# model.summary()

model.compile(loss='categorical_crossentropy',
              optimizer='Adam',
              metrics=["AUC","accuracy"])

for x in range(100):
    int = random.randint(2,123)

    # data
    test = tf.keras.preprocessing.image_dataset_from_directory(
      "/Users/***/Desktop/training",
      labels="inferred",
      label_mode="categorical",
      color_mode="rgb",
      batch_size=32,
      image_size=(224, 224),
      shuffle=True,
      seed=int,
      interpolation="bilinear",
      follow_links=False,
      crop_to_aspect_ratio=True
    )
   
    val = tf.keras.preprocessing.image_dataset_from_directory(
      "/Users/***/Desktop/validation",
      labels="inferred",
      label_mode="categorical",
      color_mode="rgb",
      batch_size=32,
      image_size=(224, 224),
      shuffle=True,
      seed=int,
      interpolation="bilinear",
      follow_links=False,
      crop_to_aspect_ratio=True
    )
   
    H = model.fit(test,
                  validation_data=val,
                  epochs=1,
                  shuffle=True,
                  verbose=1,
                  callbacks=[mc,tb,es])
