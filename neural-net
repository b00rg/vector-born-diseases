

import keras
from tensorflow.keras.preprocessing import image_dataset_from_directory
from numpy import asarray,save
import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator
from keras import backend as K
import keras
from keras.models import Sequential, Model,load_model
from keras.callbacks import EarlyStopping,ModelCheckpoint
from keras.layers import Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, AveragePooling2D, MaxPooling2D, GlobalMaxPooling2D,MaxPool2D
from keras.preprocessing import image
from keras.initializers import glorot_uniform
from tensorflow.keras.preprocessing import image_dataset_from_directory
from numpy import asarray,save
from keras.callbacks import EarlyStopping, ModelCheckpoint, TensorBoard
from keras.models import load_model
import tensorflow as tf
import cv2
import numpy as np
import os
from keras.preprocessing.image import ImageDataGenerator
import tensorflow.keras.backend as K
import keras
from keras.models import Sequential, Model,load_model
from keras.callbacks import EarlyStopping,ModelCheckpoint
from keras.layers import Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, AveragePooling2D, MaxPooling2D, GlobalMaxPooling2D,MaxPool2D
from keras.preprocessing import image
from keras.initializers import glorot_uniform

# data
test = tf.keras.preprocessing.image_dataset_from_directory(
  "/Users/Emma/Desktop/training",
  labels="inferred",
  label_mode="categorical",
  color_mode="rgb",
  batch_size=32,
  image_size=(299, 299),
  shuffle=False,
  seed=123,
  interpolation="bilinear",
  follow_links=False,
  crop_to_aspect_ratio=True
)
val = tf.keras.preprocessing.image_dataset_from_directory(
  "/Users/Emma/Desktop/validation",
  labels="inferred",
  label_mode="categorical",
  color_mode="rgb",
  batch_size=32,
  image_size=(224, 224),
  shuffle=False,
  seed=123,
  interpolation="bilinear",
  follow_links=False,
  crop_to_aspect_ratio=True
)
# Model Checkpoint
mc = tf.keras.callbacks.ModelCheckpoint(
    filepath="/Users/Emma/Desktop/epoch-data/checkpoint",
    monitor="val_loss",
    verbose=1,
    save_best_only=True,
    save_weights_only=True,
    mode="auto",
    save_freq="epoch",
    options=None,
)

tf.keras.metrics.AUC(
    num_thresholds=200,
    curve="ROC",
    summation_method="interpolation",
    name="AUC",
    dtype=None,
    thresholds=None,
    multi_label=True,
    num_labels=7,
    label_weights=None,
    from_logits=False,
)

es = tf.keras.callbacks.EarlyStopping(
    monitor="val_loss",
    min_delta=0.01,
    patience=1,
    verbose=1,
    mode="auto",
    baseline=None,
    restore_best_weights=True
)

tf.keras.losses.Poisson(reduction="auto", name="poisson")

# TensorBoard visualisations of data
tb = tf.keras.callbacks.TensorBoard(
    log_dir=r"/Users/Emma/Desktop/epoch-data/tensorLog",
    histogram_freq=0,
    write_graph=True,
    write_images=True,
    write_steps_per_second=True,
    update_freq="batch",
    profile_batch=1,
    embeddings_freq=0,
    embeddings_metadata=None
)

# TensorBoard visualisations of data
tb = tf.keras.callbacks.TensorBoard(
    log_dir=r"/Users/Emma/Downloads/vector-data-aug/tensorLog",
    histogram_freq=0,
    write_graph=True,
    write_images=True,
    write_steps_per_second=True,
    update_freq="batch",
    profile_batch=2,
    embeddings_freq=0,
    embeddings_metadata=None
)


model = tf.keras.applications.Xception(classes=7,
                                       weights=None)

# model.summary()

model.compile(loss='categorical_crossentropy',
              optimizer='adam')

H = model.fit(test,
              epochs=100,
              shuffle=True,
              verbose=1,
              callbacks=[mc,es,tb])
