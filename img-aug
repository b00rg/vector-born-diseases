import os
import random
from scipy import ndarray
import numpy
import glob
import skimage as sk
from skimage import io, exposure, transform, util
from skimage.transform import warp, AffineTransform, ProjectiveTransform
from skimage.exposure import equalize_adapthist, equalize_hist, rescale_intensity, adjust_gamma, adjust_log, adjust_sigmoid
from skimage.filters import gaussian, median
from skimage.util import random_noise
from PIL import Image

old_folder = r"C:\Users\rowan\OneDrive\Documents\VectorData"
new_folder = r"C:\Users\rowan\OneDrive\Documents\VectorDataAug"
file = [r'\aedes dataset.odt',r'\Anopheles dataset.odt',r'\culex dataset.odt']
num_generated_files = 0

def noFilter():
    None
    
def random_rotation(image_array: ndarray):
    random_degree = random.uniform(-25, 25)
    return sk.transform.rotate(image_array, random_degree)

def rand_noise(image_array: ndarray):
    return sk.util.random_noise(image_array)

def horizontal_flip(image_array: ndarray):
    return image_array[:, ::-1]

def image_bright():
    exposure.adjust_gamma(gamma=0.5,gain=1)
     
def image_dark():
    exposure.adjust_gamma(gamma=1.5,gain=1)
    
def image_median():
    sk.io.imread(as_gray=True)
    median()
    

def randomIntensity(im):
    return rescale_intensity(im,
                             in_range=tuple(numpy.percentile(im, (random.randrange(0,10), random.randrange(90,100)))),
                             out_range=tuple(numpy.percentile(im, (random.randrange(0,10), random.randrange(90,100)))))

def randomGamma(im):
    return adjust_gamma(im, gamma=random.randrange(int(0.5, 1.5)))

def randomGaussian(im):
    return gaussian(im, sigma=random.randrange(0, 5))

def randomFilter(im):
    Filters = [equalize_adapthist, equalize_hist, adjust_log, adjust_sigmoid, randomGamma, randomGaussian, randomIntensity]
    filt = random.choice(Filters)
    return filt(im)

def randomAffine(im):
    tform = AffineTransform(scale=(random.randrange(int(0.75, 1.3)), random.randrange(0.75, 1.3)),
                            rotation=random.randrange(int(-0.25, 0.25),
                            shear=random.randrange(int(-0.2, 0.2))),
                            translation=(random.randrange(-im.shape[0]//10, im.shape[0]//10), 
                                         random.randrange(-im.shape[1]//10, im.shape[1]//10)))
    return warp(im, tform.inverse, mode='reflect')

def randomPerspective(im):

    region = 1/4
    A = numpy.array([[0, 0], [0, im.shape[0]], [im.shape[1], im.shape[0]], [im.shape[1], 0]])
    B = numpy.array([[int(random.randrange(0, im.shape[1] * region)), int(random.randrange(0, im.shape[0] * region))], 
                     [int(random.randrange(0, im.shape[1] * region)), int(random.randrange(im.shape[0] * (1-region), im.shape[0]))], 
                  [int(random.randrange(im.shape[1] * (1-region), im.shape[1])), int(random.randrange(im.shape[0] * (1-region), im.shape[0]))], 
                  [int(random.randrange(im.shape[1] * (1-region), im.shape[1])), int(random.randrange(0, im.shape[0] * region))], 
                 ])

    pt = ProjectiveTransform()
    pt.estimate(A, B)
    return warp(im, pt, output_shape=im.shape[:2])

def sp_noise(img):
    row , col = img.shape
    number_of_pixels = random.randint(300, 10000)
    for i in range(number_of_pixels):
        
        y_coord=random.randint(0, row - 1)
        x_coord=random.randint(0, col - 1)
        img[y_coord][x_coord] = 255
          
    number_of_pixels = random.randint(300 , 10000)
    for i in range(number_of_pixels):
        
        y_coord=random.randint(0, row - 1)
        x_coord=random.randint(0, col - 1)
        img[y_coord][x_coord] = 0


available_transformations = {
    'sp' : sp_noise,
    'rotate': random_rotation,
    'noise': random_noise,
    'horizontal_flip': horizontal_flip,
    'bright' : image_bright,
    'dark' : image_dark,
    'median' : image_median,
    'randInt' : randomIntensity,
    'randGam' : randomGamma,
    'randGaus' : randomGaussian,
    'randFilt' : randomFilter,
    'randAff' : randomAffine,
    'randNoise' : rand_noise,
    'randPer' : randomPerspective,
    'noFilt' : noFilter
}

while num_generated_files <= len(available_transformations):
    # read image
    images = []  
    for filename in os.listdir(old_folder):
        for jpg in glob.glob(os.path.join(old_folder, filename, "images/*.jpg")):
            filenames.sort()
            images = [cv2.imread(img) for img in filenames]

            for img in images:
        
                num_transformations_to_apply = len(available_transformations)

                aug = 0
                num_transformations = 0
                transformed_image = None
        
                while num_transformations <= num_transformations_to_apply:
                
                    if aug == 0:
                        key = 'rotate'
                        aug = aug + 1
                    
                    elif aug == 1:
                        key = 'noise'
                        aug = aug + 1
                    
                    elif aug == 2:
                        key = 'horizontal_flip'
                        aug = aug + 1
                    
                    elif aug == 3:
                        key = 'bright'
                        aug = aug + 1
                
                    elif aug == 4:
                        key = 'dark'
                        aug = aug + 1
                    
                    elif aug == 5:
                        key = 'median'
                        aug = aug + 1
                    
                    elif aug == 6:
                        key = 'randRange'
                        aug = aug + 1
                    
                    elif aug == 7:
                        key = 'randInt'
                        aug = aug + 1
                    
                    elif aug == 8:
                        key = 'randGam'
                        aug = aug + 1
                    
                    elif aug == 9:
                        key = 'randGaus'
                        aug = aug + 1
                    
                    elif aug == 10:
                        key = 'randFilt'
                        aug = aug + 1
                    
                    elif aug == 11:
                        key = 'randAff'
                        aug = aug +1
                    
                    elif aug == 12:
                        key = 'randPer'
                        aug = aug + 1
                    
                    elif aug == 13:
                        key = 'sp'
                        aug = aug + 1
                    
                    elif aug == 14:
                        key = 'randNoise'
                        aug = aug + 1
                        
                    elif aug == 15:
                        key = 'noFilt'
                        aug = aug + 1
                        
                    elif aug == 16:
                        continue
                    
                      
                    transformed_image = available_transformations[key](image_to_transform)
                    num_transformations += 1

                    # write image
                    io.imsave(new_folder + filename, transformed_image)
                    num_generated_files += 1
    
    else:
        continue





